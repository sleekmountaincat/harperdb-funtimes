name: harperdb-load-test

on: [workflow_dispatch, push]

jobs:
  harperdb-load-test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup docker compose
        uses: docker/setup-compose-action@v1

      - name: setup k6
        uses: grafana/setup-k6-action@v1

      - name: start harperdb and metrics stack
        run: docker compose -f .ci/harperdb-metric-stack-compose.yaml up -d

      - name: wait for harperdb, install prom exporter
        # grab start timestamp so we can get a decent guess at appropriate window for grafana dashboard
        run: |
          .ci/scripts/wait-for-harperdb-install-prom-exporter.sh
          echo "START_TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
        timeout-minutes: 1

      - name: start container monitor
        run: |
          .ci/scripts/harperdb-container-monitor.sh &
        timeout-minutes: 1

      - name: load test data
        run: |
          .ci/scripts/load-data.sh
        timeout-minutes: 1

      - name: run load test
        run: |
          .ci/scripts/run-load-tests.sh

      - name: grab dashboard screenshot
        # we need to sleep a bit so aggregation can occur.
        # we then hit grafana API to generate a screenshot of our pretty dashboard with
        # all of our load test metrics (harperdb internal metrics, k6 load test metrics, and harperdb container metrics).
        # the range is not an exact science, but we try and cut off some blank space at the start of our visualizations
        run: |
          sleep 60  # Wait longer than the default aggregation period
          let MINS_ELAPSED=($(($(date +%s) - START_TIMESTAMP)) / 60)
          RANGE=$((MINS_ELAPSED + 1))
          curl -s -u "admin:admin" "http://localhost:3000/render/d/load-test/dashboard?width=1920&height=1200&from=now-${RANGE}m&to=now&kiosk" --output dashboard.png

      - name: build load test summary
        # i really wanted to have the dashboard visible in the github actions summary, but alas to do that we
        # need to host the image somewhere. i found https://0x0.st which is slick, free and needs no account
        # we also provide a quick summary of the k6 summaries.
        # together, the grafana visualizations and k6 overview provide a nice, easily digestible story of our load test
        run: |
          IMAGE_URL=$(curl -s -F "file=@dashboard.png" https://0x0.st)
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Load Test Results
          ![Dashboard]($IMAGE_URL)
          
          ## K6 Summaries
          \`\`\`
          Test                | Avg (ms)  | Requests | Rate (req/s) | Failed %
          ------------------- | --------- | -------- | ------------ | --------
          SQL Analytics       | $(printf "%9.2f" $(jq -r '.metrics.http_req_duration.avg' sql-analytics-summary.json)) | $(printf "%8s" $(jq -r '.metrics.http_reqs.count' sql-analytics-summary.json)) | $(printf "%12.2f" $(jq -r '.metrics.http_reqs.rate' sql-analytics-summary.json)) | $(printf "%8.2f" $(jq -r '.metrics.http_req_failed.rate' sql-analytics-summary.json | awk '{printf "%.2f", $1*100}'))
          Search Conditions   | $(printf "%9.2f" $(jq -r '.metrics.http_req_duration.avg' search-by-conditions-summary.json)) | $(printf "%8s" $(jq -r '.metrics.http_reqs.count' search-by-conditions-summary.json)) | $(printf "%12.2f" $(jq -r '.metrics.http_reqs.rate' search-by-conditions-summary.json)) | $(printf "%8.2f" $(jq -r '.metrics.http_req_failed.rate' search-by-conditions-summary.json | awk '{printf "%.2f", $1*100}'))
          Search Wildcard     | $(printf "%9.2f" $(jq -r '.metrics.http_req_duration.avg' search-by-value-wildcard-summary.json)) | $(printf "%8s" $(jq -r '.metrics.http_reqs.count' search-by-value-wildcard-summary.json)) | $(printf "%12.2f" $(jq -r '.metrics.http_reqs.rate' search-by-value-wildcard-summary.json)) | $(printf "%8.2f" $(jq -r '.metrics.http_req_failed.rate' search-by-value-wildcard-summary.json | awk '{printf "%.2f", $1*100}'))
          Insert              | $(printf "%9.2f" $(jq -r '.metrics.http_req_duration.avg' insert-summary.json)) | $(printf "%8s" $(jq -r '.metrics.http_reqs.count' insert-summary.json)) | $(printf "%12.2f" $(jq -r '.metrics.http_reqs.rate' insert-summary.json)) | $(printf "%8.2f" $(jq -r '.metrics.http_req_failed.rate' insert-summary.json | awk '{printf "%.2f", $1*100}'))
          \`\`\`
    
          Generated on: $(date)
          EOF

      # grab our visualizations and k6 load test summaries
      - name: upload results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results-${{ github.sha }}
          path: |
            *-summary.json
            dashboard.png